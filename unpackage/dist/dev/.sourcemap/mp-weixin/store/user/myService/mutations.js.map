{"version":3,"file":"mutations.js","sources":["store/user/myService/mutations.js"],"sourcesContent":["/**\n * myService模块的mutations\n * @module store/user/myService/mutations\n */\n\nexport default {\n    /**\n     * 设置用户服务列表\n     * @param {Object} state - 当前模块的状态\n     * @param {Array} services - 服务数组\n     */\n    SET_USER_SERVICES(state, services) {\n        state.service = services;\n    },\n    \n    /**\n     * 用户修改服务信息\n     * @param {Object} state - 当前模块的状态\n     * @param {Object} payload - 包含服务ID和更新信息的对象\n     * @param {string} payload.id - 要更新的服务ID\n     * @param {Object} payload.updatedInfo - 用户修改后的服务信息\n     */\n    UPDATE_SERVICE_BY_USER(state, { id, updatedInfo }) {\n        const serviceIndex = state.service.findIndex(service => service.id === id);\n        if (serviceIndex !== -1) {\n            // 合并原有信息和更新的信息\n            state.service[serviceIndex] = {\n                ...state.service[serviceIndex],\n                ...updatedInfo,\n                updateTime: new Date().toISOString().split('T')[0] // 添加更新时间\n            };\n        }\n    },\n    \n    /**\n     * 添加新服务\n     * @param {Object} state - 当前模块的状态\n     * @param {Object} serviceData - 新服务数据\n     */\n    ADD_SERVICE(state, serviceData) {\n        // 确保服务有创建和更新时间\n        const now = new Date().toISOString().split('T')[0];\n        const newService = {\n            ...serviceData,\n            createTime: serviceData.createTime || now,\n            updateTime: serviceData.updateTime || now,\n            status: serviceData.status || 'active'\n        };\n        \n        // 添加到服务列表的最前面，使最新的服务优先显示\n        state.service.unshift(newService);\n    },\n    \n    /**\n     * 删除服务\n     * @param {Object} state - 当前模块的状态\n     * @param {String} serviceId - 要删除的服务ID\n     */\n    DELETE_SERVICE(state, serviceId) {\n        state.service = state.service.filter(service => service.id !== serviceId);\n    },\n    \n    /**\n     * 设置当前正在编辑的服务\n     * @param {Object} state - 当前模块的状态\n     * @param {Object|null} service - 服务对象或null\n     */\n    SET_CURRENT_EDITING_SERVICE(state, service) {\n        state.currentEditingService = service;\n    },\n    \n    /**\n     * 设置服务过滤条件\n     * @param {Object} state - 当前模块的状态\n     * @param {Object} filter - 过滤条件\n     */\n    SET_SERVICE_FILTER(state, filter) {\n        state.filter = {\n            ...state.filter,\n            ...filter\n        };\n    },\n    \n    /**\n     * 添加服务封面图片\n     * @param {Object} state - 当前模块的状态\n     * @param {Object} payload - 包含服务ID和图片URL的对象\n     * @param {String} payload.id - 要更新的服务ID\n     * @param {String} payload.imageUrl - 图片URL\n     */\n    ADD_SERVICE_COVER_IMAGE(state, { id, imageUrl }) {\n        const serviceIndex = state.service.findIndex(service => service.id === id);\n        if (serviceIndex !== -1) {\n            const service = state.service[serviceIndex];\n            \n            // 初始化图片数组（如果不存在）\n            const imageUrls = service.imageUrls || [];\n            \n            // 更新服务数据\n            state.service[serviceIndex] = {\n                ...service,\n                image: imageUrl, // 主封面图片\n                imageUrls: [...imageUrls, imageUrl], // 所有图片列表\n                updateTime: new Date().toISOString().split('T')[0]\n            };\n        }\n    },\n    \n    /**\n     * 删除服务封面图片\n     * @param {Object} state - 当前模块的状态\n     * @param {Object} payload - 包含服务ID和图片索引的对象\n     * @param {String} payload.id - 要更新的服务ID\n     * @param {Number} payload.index - 要删除的图片索引\n     */\n    DELETE_SERVICE_COVER_IMAGE(state, { id, index }) {\n        const serviceIndex = state.service.findIndex(service => service.id === id);\n        if (serviceIndex !== -1) {\n            const service = state.service[serviceIndex];\n            \n            // 确保图片数组存在\n            if (service.imageUrls && service.imageUrls.length > index) {\n                // 创建新的图片数组，排除要删除的图片\n                const newImageUrls = [...service.imageUrls];\n                newImageUrls.splice(index, 1);\n                \n                // 更新服务数据\n                state.service[serviceIndex] = {\n                    ...service,\n                    // 如果主封面被删除，则使用第一张图片或空字符串\n                    image: newImageUrls.length > 0 ? newImageUrls[0] : '',\n                    imageUrls: newImageUrls,\n                    updateTime: new Date().toISOString().split('T')[0]\n                };\n            }\n        }\n    },\n    \n    /**\n     * 设置服务附件链接\n     * @param {Object} state - 当前模块的状态\n     * @param {Object} payload - 包含服务ID和附件链接的对象\n     * @param {String} payload.id - 要更新的服务ID\n     * @param {String} payload.fileLink - 附件链接\n     */\n    SET_SERVICE_FILE_LINK(state, { id, fileLink }) {\n        const serviceIndex = state.service.findIndex(service => service.id === id);\n        if (serviceIndex !== -1) {\n            // 更新服务附件链接\n            state.service[serviceIndex] = {\n                ...state.service[serviceIndex],\n                fileLink,\n                updateTime: new Date().toISOString().split('T')[0]\n            };\n        }\n    }\n}; "],"names":[],"mappings":"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"}