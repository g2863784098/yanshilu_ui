{"version":3,"file":"actions.js","sources":["store/user/ai-chat/actions.js"],"sourcesContent":["/**\n * ai-chat模块的actions\n * @module store/user/ai-chat/actions\n */\n\n// 导入真实API实现\nimport { \n    sendMessageToAI, \n    getConversationHistory, \n    getConversationDetail as fetchConversationDetail, \n    deleteConversation \n} from '../APIroute/AIchat_api/AIchat_api.js';\n\nexport default {\n    /**\n     * 设置当前活跃的聊天会话\n     * @param {Object} context - Vuex上下文\n     * @param {string} chatId - 聊天会话ID\n     */\n    setCurrentChat({ commit }, chatId) {\n        commit('UPDATE_CURRENT_CONVERSATION', chatId);\n    },\n    \n    /**\n     * 发送问题到AI并获取回答\n     * @param {Object} context - Vuex上下文\n     * @param {Object} payload - 请求数据\n     * @param {string} payload.question - 用户问题\n     * @param {Object} payload.contextInfo - 上下文信息\n     * @param {string} payload.chatId - 对话ID\n     * @returns {Promise<Object>} 返回请求结果\n     */\n    async sendQuestion({ commit, state }, payload) {\n        try {\n            // 构建消息数据\n            const messageData = {\n                content: payload.question,\n                chatMode: payload.contextInfo?.mode || state.aiChat.chatMode,\n                conversationId: payload.chatId || state.aiChat.activeConversation\n            };\n            \n            // 调用真实API\n            const response = await sendMessageToAI(messageData);\n            \n            // 如果API调用成功\n            if (response.success) {\n                // 更新当前会话ID\n                commit('UPDATE_CURRENT_CONVERSATION', response.conversationId);\n                \n                // 在本地保存问答记录\n                const newMessage = {\n                    id: `msg-${Date.now()}`,\n                    type: 'user',\n                    content: payload.question,\n                    timestamp: new Date().toISOString()\n                };\n                \n                const aiResponse = {\n                    id: `msg-${Date.now() + 1}`,\n                    type: 'ai',\n                    content: response.aiResponse,\n                    timestamp: new Date().toISOString()\n                };\n                \n                // 查找当前对话\n                const currentChat = state.aiChat.conversations.find(\n                    conv => conv.id === response.conversationId\n                );\n                \n                if (currentChat) {\n                    // 更新现有对话\n                    const updatedChat = {\n                        ...currentChat,\n                        messages: [...(currentChat.messages || []), newMessage, aiResponse],\n                        updatedAt: new Date().toISOString()\n                    };\n                    \n                    commit('UPDATE_CONVERSATION_DETAIL', updatedChat);\n                } else {\n                    // 创建新对话\n                    const newChat = {\n                        id: response.conversationId,\n                        abstract: payload.question.substring(0, 30) + (payload.question.length > 30 ? '...' : ''),\n                        chatMode: state.aiChat.chatMode,\n                        createdAt: new Date().toISOString(),\n                        updatedAt: new Date().toISOString(),\n                        messages: [newMessage, aiResponse]\n                    };\n                    \n                    commit('UPDATE_CONVERSATION_DETAIL', newChat);\n                }\n            }\n            \n            return {\n                success: response.success,\n                data: response.aiResponse,\n                chatId: response.conversationId,\n                message: response.message\n            };\n        } catch (error) {\n            console.error('AI问答出错:', error);\n            return {\n                success: false,\n                error: error.error || error,\n                message: error.error?.message || '请求失败'\n            };\n        }\n    },\n\n    \n    /**\n     * 加载特定对话的完整内容\n     * @param {Object} context - Vuex上下文\n     * @param {string} conversationId - 对话ID\n     * @returns {Promise<Object>} 返回请求结果\n     */\n    async loadChat({ commit }, conversationId) {\n        try {\n            // 调用真实API获取会话详情\n            const response = await fetchConversationDetail(conversationId);\n            \n            if (response.success) {\n                // 构建会话数据结构\n                const conversationData = {\n                    id: conversationId,\n                    messages: response.messages,\n                    updatedAt: new Date().toISOString()\n                    // 其他会话详情字段...\n                };\n                \n                // 更新对话详情并设置为当前活跃对话\n                commit('UPDATE_CONVERSATION_DETAIL', conversationData);\n            }\n            \n            return {\n                success: response.success,\n                data: response.messages\n            };\n        } catch (error) {\n            console.error('加载对话详情失败:', error);\n            return {\n                success: false,\n                error: error.error || error,\n                message: error.error?.message || '加载对话详情失败'\n            };\n        }\n    },\n    \n    /**\n     * 保存新的对话或更新现有对话\n     * @param {Object} context - Vuex上下文\n     * @param {Object} chatData - 对话数据\n     * @returns {Promise<Object>} 返回操作结果\n     */\n    async saveChat({ commit, state }, chatData) {\n        try {\n            // 这里可以添加API调用来保存对话到后端\n            // 但对于前端演示，我们只在本地更新\n            \n            const existingConversation = state.aiChat.conversations.find(\n                conv => conv.id === chatData.id\n            );\n            \n            if (existingConversation) {\n                // 更新已有对话\n                commit('UPDATE_CONVERSATION_DETAIL', {\n                    ...existingConversation,\n                    ...chatData,\n                    updatedAt: new Date().toISOString()\n                });\n            } else {\n                // 添加新对话\n                const newConversation = {\n                    id: chatData.id,\n                    abstract: chatData.title || '新对话',\n                    chatMode: chatData.chatMode || 'general',\n                    createdAt: chatData.createdAt?.toISOString() || new Date().toISOString(),\n                    updatedAt: chatData.updatedAt?.toISOString() || new Date().toISOString(),\n                    messages: chatData.messages || []\n                };\n                \n                commit('UPDATE_CONVERSATION_DETAIL', newConversation);\n            }\n            \n            return { success: true };\n        } catch (error) {\n            console.error('保存对话失败:', error);\n            return {\n                success: false,\n                message: '保存对话失败'\n            };\n        }\n    },\n    \n    /**\n     * 删除指定的对话\n     * @param {Object} context - Vuex上下文\n     * @param {string} conversationId - 对话ID\n     * @returns {Promise<Object>} 返回操作结果\n     */\n    async deleteChat({ commit, state }, conversationId) {\n        try {\n            // 调用真实API从后端删除对话\n            const response = await deleteConversation(conversationId);\n            \n            if (response.success) {\n                // 从本地会话列表中移除\n                commit('DELETE_CONVERSATION', conversationId);\n                \n                // 如果删除的是当前活跃会话，则清空当前活跃会话\n                if (state.aiChat.activeConversation === conversationId) {\n                    commit('UPDATE_CURRENT_CONVERSATION', null);\n                }\n            }\n            \n            return { \n                success: response.success,\n                message: response.message || (response.success ? '删除成功' : '删除失败')\n            };\n        } catch (error) {\n            console.error('删除对话失败:', error);\n            return {\n                success: false,\n                error: error.error || error,\n                message: error.error?.message || '删除对话失败'\n            };\n        }\n    },\n    \n    /**\n     * 获取对话历史列表\n     * @param {Object} context - Vuex上下文\n     * @returns {Promise<Object>} 返回请求结果\n     */\n    async loadConversationHistory({ commit }) {\n        try {\n            // 调用真实API获取对话历史\n            const response = await getConversationHistory();\n            \n            if (response.success && response.conversations) {\n                // 更新会话列表\n                commit('SET_CONVERSATIONS', response.conversations);\n            }\n            \n            return {\n                success: response.success,\n                data: response.conversations\n            };\n        } catch (error) {\n            console.error('获取对话历史失败:', error);\n            return {\n                success: false,\n                error: error.error || error,\n                message: error.error?.message || '获取对话历史失败'\n            };\n        }\n    }\n};"],"names":["sendMessageToAI","uni","fetchConversationDetail","deleteConversation","getConversationHistory"],"mappings":"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"}