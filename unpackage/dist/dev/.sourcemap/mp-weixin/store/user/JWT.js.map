{"version":3,"file":"JWT.js","sources":["store/user/JWT.js"],"sourcesContent":["/**\n * JWT相关工具函数\n * @module store/user/JWT\n */\n\n// 导入路由管理器\nimport { Navigator } from '@/router/Router.js';\n\n/**\n * 创建JWT令牌\n * @param {string} userId - 用户ID\n * @param {string} [secret='yanshilu-jwt-secret'] - 加密密钥\n * @param {Object} [additionalData={}] - 额外的数据\n * @returns {string} 生成的JWT令牌\n */\nexport const createToken = (userId, secret = 'yanshilu-jwt-secret', additionalData = {}) => {\n  // 构建JWT的payload部分\n  const payload = {\n    userId: userId,\n    ...additionalData,\n    iat: Math.floor(Date.now() / 1000), // 令牌签发时间\n    exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7 // 7天过期\n  };\n\n  // Base64编码header\n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  };\n  const base64Header = btoa(JSON.stringify(header));\n\n  // Base64编码payload\n  const base64Payload = btoa(JSON.stringify(payload));\n\n  // 创建签名 (在前端我们使用简化版本，真实签名应在后端完成)\n  const signature = createSignature(`${base64Header}.${base64Payload}`, secret);\n\n  // 返回完整的JWT\n  return `${base64Header}.${base64Payload}.${signature}`;\n};\n\n/**\n * 创建签名（简化版，生产环境应使用专业库）\n * @param {string} data - 要签名的数据\n * @param {string} secret - 签名密钥\n * @returns {string} 签名结果\n */\nconst createSignature = (data, secret) => {\n  // 注意：这是签名的简化实现，仅用于演示\n  // 生产环境中应使用crypto-js或其他安全库进行真实HMAC-SHA256签名\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash |= 0; // 转换为32位整数\n  }\n  return btoa(hash + secret);\n};\n\n/**\n * 验证JWT令牌\n * @param {string} token - JWT令牌\n * @param {string} [secret='yanshilu-jwt-secret'] - 加密密钥\n * @returns {boolean} 令牌是否有效\n */\nexport const verifyToken = (token, secret = 'yanshilu-jwt-secret') => {\n  try {\n    // 分解JWT各部分\n    const [headerBase64, payloadBase64, signature] = token.split('.');\n    \n    // 验证签名\n    const expectedSignature = createSignature(`${headerBase64}.${payloadBase64}`, secret);\n    if (signature !== expectedSignature) {\n      return false;\n    }\n    \n    // 解析payload\n    const payload = JSON.parse(atob(payloadBase64));\n    \n    // 检查是否过期\n    const currentTime = Math.floor(Date.now() / 1000);\n    if (payload.exp && payload.exp < currentTime) {\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('JWT验证失败:', error);\n    return false;\n  }\n};\n\n/**\n * 解析JWT令牌获取用户ID\n * @param {string} token - JWT令牌\n * @returns {string|null} 用户ID，无效令牌返回null\n */\nexport const getUserIdFromToken = (token) => {\n  try {\n    const [, payloadBase64] = token.split('.');\n    const payload = JSON.parse(atob(payloadBase64));\n    return payload.userId || null;\n  } catch (error) {\n    console.error('解析JWT令牌失败:', error);\n    return null;\n  }\n};\n\n/**\n * 解析JWT令牌获取完整载荷\n * @param {string} token - JWT令牌\n * @returns {Object|null} 载荷对象，无效令牌返回null\n */\nexport const getPayloadFromToken = (token) => {\n  try {\n    const [, payloadBase64] = token.split('.');\n    return JSON.parse(atob(payloadBase64));\n  } catch (error) {\n    console.error('解析JWT载荷失败:', error);\n    return null;\n  }\n};\n\n/**\n * 获取当前用户令牌\n * @returns {string|null} 用户令牌，未登录返回null\n */\nexport const getCurrentToken = () => {\n  return uni.getStorageSync('user-token') || null;\n};\n\n/**\n * 获取当前用户ID\n * @returns {string|null} 用户ID，未登录返回null\n */\nexport const getCurrentUserId = () => {\n  const token = getCurrentToken();\n  return token ? getUserIdFromToken(token) : null;\n};\n\n/**\n * 基于JWT令牌的统一API请求工具\n * @param {string} url - 请求URL\n * @param {string} [method='GET'] - 请求方法\n * @param {Object} [data={}] - 请求数据\n * @param {Object} [options={}] - 额外选项\n * @param {boolean} [options.autoAddUserId=true] - 是否自动添加用户ID\n * @param {boolean} [options.requireAuth=true] - 是否要求认证\n * @param {boolean} [options.showError=true] - 是否显示错误提示\n * @param {Object} [options.customHeader={}] - 自定义请求头\n * @returns {Promise<Object>} 请求结果Promise\n */\nexport const apiRequest = (url, method = 'GET', data = {}, options = {}) => {\n  const defaultOptions = {\n    autoAddUserId: true,\n    requireAuth: true,\n    showError: true,\n    customHeader: {}\n  };\n  \n  const finalOptions = { ...defaultOptions, ...options };\n  \n  return new Promise((resolve, reject) => {\n    // 获取令牌\n    const token = getCurrentToken();\n    \n    // 如果需要认证但没有令牌\n    if (finalOptions.requireAuth && (!token || !verifyToken(token))) {\n      const error = {\n        success: false,\n        error: {\n          code: 401,\n          message: '未登录或认证已过期，请重新登录'\n        }\n      };\n      \n      if (finalOptions.showError) {\n        uni.showToast({\n          title: error.error.message,\n          icon: 'none',\n          duration: 2000\n        });\n      }\n      \n      reject(error);\n      return;\n    }\n    \n    // 准备请求数据，如果需要则自动添加用户ID\n    let requestData = { ...data };\n    \n    if (finalOptions.autoAddUserId && token) {\n      const userId = getUserIdFromToken(token);\n      if (userId) {\n        requestData = method.toUpperCase() === 'GET' \n          ? { ...requestData, userId } \n          : { ...requestData, userId };\n      }\n    }\n    \n    // 准备请求头\n    const headers = {\n      'Content-Type': 'application/json',\n      ...finalOptions.customHeader\n    };\n    \n    // 如果有令牌则添加到请求头\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    // 发送请求\n    uni.request({\n      url,\n      method: method.toUpperCase(),\n      data: requestData,\n      header: headers,\n      success: (res) => {\n        // 请求成功但业务逻辑错误\n        if (res.statusCode === 200 && res.data && res.data.code === 200) {\n          resolve({\n            success: true,\n            data: res.data.data\n          });\n        } else if (res.statusCode === 401 || res.statusCode === 403) {\n          // 认证失败，清除令牌\n          uni.removeStorageSync('user-token');\n          uni.removeStorageSync('userId');\n          \n          const error = {\n            success: false,\n            error: {\n              statusCode: res.statusCode,\n              message: res.data?.msg || (res.statusCode === 401 ? '认证已过期，请重新登录' : '无权访问')\n            }\n          };\n          \n          if (finalOptions.showError) {\n            uni.showToast({\n              title: error.error.message,\n              icon: 'none',\n              duration: 2000\n            });\n            \n            // 如果认证失败，可以跳转到登录页\n            setTimeout(() => {\n              Navigator.toLogin();\n            }, 2000);\n          }\n          \n          reject(error);\n        } else {\n          // 其他业务逻辑错误\n          const error = {\n            success: false,\n            error: {\n              statusCode: res.statusCode,\n              message: res.data?.msg || '请求失败'\n            }\n          };\n          \n          if (finalOptions.showError) {\n            uni.showToast({\n              title: error.error.message,\n              icon: 'none',\n              duration: 2000\n            });\n          }\n          \n          reject(error);\n        }\n      },\n      fail: (err) => {\n        // 网络请求失败\n        const error = {\n          success: false,\n          error: {\n            message: err.errMsg || '网络请求失败'\n          }\n        };\n        \n        if (finalOptions.showError) {\n          uni.showToast({\n            title: error.error.message,\n            icon: 'none',\n            duration: 2000\n          });\n        }\n        \n        reject(error);\n      }\n    });\n  });\n};\n"],"names":["uni","Navigator"],"mappings":";;;AA+CA,MAAM,kBAAkB,CAAC,MAAM,WAAW;AAGxC,MAAI,OAAO;AACX,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAM,OAAO,KAAK,WAAW,CAAC;AAC9B,YAAS,QAAQ,KAAK,OAAQ;AAC9B,YAAQ;AAAA,EACT;AACD,SAAO,KAAK,OAAO,MAAM;AAC3B;AAQO,MAAM,cAAc,CAAC,OAAO,SAAS,0BAA0B;AACpE,MAAI;AAEF,UAAM,CAAC,cAAc,eAAe,SAAS,IAAI,MAAM,MAAM,GAAG;AAGhE,UAAM,oBAAoB,gBAAgB,GAAG,YAAY,IAAI,aAAa,IAAI,MAAM;AACpF,QAAI,cAAc,mBAAmB;AACnC,aAAO;AAAA,IACR;AAGD,UAAM,UAAU,KAAK,MAAM,KAAK,aAAa,CAAC;AAG9C,UAAM,cAAc,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI;AAChD,QAAI,QAAQ,OAAO,QAAQ,MAAM,aAAa;AAC5C,aAAO;AAAA,IACR;AAED,WAAO;AAAA,EACR,SAAQ,OAAO;AACdA,kBAAA,MAAA,MAAA,SAAA,2BAAc,YAAY,KAAK;AAC/B,WAAO;AAAA,EACR;AACH;AAOO,MAAM,qBAAqB,CAAC,UAAU;AAC3C,MAAI;AACF,UAAM,CAAG,EAAA,aAAa,IAAI,MAAM,MAAM,GAAG;AACzC,UAAM,UAAU,KAAK,MAAM,KAAK,aAAa,CAAC;AAC9C,WAAO,QAAQ,UAAU;AAAA,EAC1B,SAAQ,OAAO;AACdA,kBAAc,MAAA,MAAA,SAAA,4BAAA,cAAc,KAAK;AACjC,WAAO;AAAA,EACR;AACH;AAqBO,MAAM,kBAAkB,MAAM;AACnC,SAAOA,oBAAI,eAAe,YAAY,KAAK;AAC7C;AAuBY,MAAC,aAAa,CAAC,KAAK,SAAS,OAAO,OAAO,CAAE,GAAE,UAAU,OAAO;AAC1E,QAAM,iBAAiB;AAAA,IACrB,eAAe;AAAA,IACf,aAAa;AAAA,IACb,WAAW;AAAA,IACX,cAAc,CAAE;AAAA,EACpB;AAEE,QAAM,eAAe,EAAE,GAAG,gBAAgB,GAAG,QAAO;AAEpD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,UAAM,QAAQ;AAGd,QAAI,aAAa,gBAAgB,CAAC,SAAS,CAAC,YAAY,KAAK,IAAI;AAC/D,YAAM,QAAQ;AAAA,QACZ,SAAS;AAAA,QACT,OAAO;AAAA,UACL,MAAM;AAAA,UACN,SAAS;AAAA,QACV;AAAA,MACT;AAEM,UAAI,aAAa,WAAW;AAC1BA,sBAAAA,MAAI,UAAU;AAAA,UACZ,OAAO,MAAM,MAAM;AAAA,UACnB,MAAM;AAAA,UACN,UAAU;AAAA,QACpB,CAAS;AAAA,MACF;AAED,aAAO,KAAK;AACZ;AAAA,IACD;AAGD,QAAI,cAAc,EAAE,GAAG;AAEvB,QAAI,aAAa,iBAAiB,OAAO;AACvC,YAAM,SAAS,mBAAmB,KAAK;AACvC,UAAI,QAAQ;AACV,sBAAc,OAAO,YAAW,MAAO,QACnC,EAAE,GAAG,aAAa,OAAQ,IAC1B,EAAE,GAAG,aAAa;MACvB;AAAA,IACF;AAGD,UAAM,UAAU;AAAA,MACd,gBAAgB;AAAA,MAChB,GAAG,aAAa;AAAA,IACtB;AAGI,QAAI,OAAO;AACT,cAAQ,eAAe,IAAI,UAAU,KAAK;AAAA,IAC3C;AAGDA,kBAAAA,MAAI,QAAQ;AAAA,MACV;AAAA,MACA,QAAQ,OAAO,YAAa;AAAA,MAC5B,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,SAAS,CAAC,QAAQ;;AAEhB,YAAI,IAAI,eAAe,OAAO,IAAI,QAAQ,IAAI,KAAK,SAAS,KAAK;AAC/D,kBAAQ;AAAA,YACN,SAAS;AAAA,YACT,MAAM,IAAI,KAAK;AAAA,UAC3B,CAAW;AAAA,QACX,WAAmB,IAAI,eAAe,OAAO,IAAI,eAAe,KAAK;AAE3DA,8BAAI,kBAAkB,YAAY;AAClCA,8BAAI,kBAAkB,QAAQ;AAE9B,gBAAM,QAAQ;AAAA,YACZ,SAAS;AAAA,YACT,OAAO;AAAA,cACL,YAAY,IAAI;AAAA,cAChB,WAAS,SAAI,SAAJ,mBAAU,SAAQ,IAAI,eAAe,MAAM,gBAAgB;AAAA,YACrE;AAAA,UACb;AAEU,cAAI,aAAa,WAAW;AAC1BA,0BAAAA,MAAI,UAAU;AAAA,cACZ,OAAO,MAAM,MAAM;AAAA,cACnB,MAAM;AAAA,cACN,UAAU;AAAA,YACxB,CAAa;AAGD,uBAAW,MAAM;AACfC,4BAAS,UAAC,QAAO;AAAA,YAClB,GAAE,GAAI;AAAA,UACR;AAED,iBAAO,KAAK;AAAA,QACtB,OAAe;AAEL,gBAAM,QAAQ;AAAA,YACZ,SAAS;AAAA,YACT,OAAO;AAAA,cACL,YAAY,IAAI;AAAA,cAChB,WAAS,SAAI,SAAJ,mBAAU,QAAO;AAAA,YAC3B;AAAA,UACb;AAEU,cAAI,aAAa,WAAW;AAC1BD,0BAAAA,MAAI,UAAU;AAAA,cACZ,OAAO,MAAM,MAAM;AAAA,cACnB,MAAM;AAAA,cACN,UAAU;AAAA,YACxB,CAAa;AAAA,UACF;AAED,iBAAO,KAAK;AAAA,QACb;AAAA,MACF;AAAA,MACD,MAAM,CAAC,QAAQ;AAEb,cAAM,QAAQ;AAAA,UACZ,SAAS;AAAA,UACT,OAAO;AAAA,YACL,SAAS,IAAI,UAAU;AAAA,UACxB;AAAA,QACX;AAEQ,YAAI,aAAa,WAAW;AAC1BA,wBAAAA,MAAI,UAAU;AAAA,YACZ,OAAO,MAAM,MAAM;AAAA,YACnB,MAAM;AAAA,YACN,UAAU;AAAA,UACtB,CAAW;AAAA,QACF;AAED,eAAO,KAAK;AAAA,MACb;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;;"}