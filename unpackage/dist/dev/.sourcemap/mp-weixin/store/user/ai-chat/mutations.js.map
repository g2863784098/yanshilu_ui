{"version":3,"file":"mutations.js","sources":["store/user/ai-chat/mutations.js"],"sourcesContent":["/**\n * ai-chat模块的mutations\n * @module store/user/ai-chat/mutations\n */\n\nexport default {\n    /**\n     * 更新对话列表（仅包含摘要、ID和聊天模式）\n     * @param {Object} state - Vuex状态对象\n     * @param {Array<Object>} conversationsList - 对话列表数据\n     * @param {string} conversationsList[].id - 对话ID\n     * @param {string} conversationsList[].abstract - 对话摘要\n     * @param {string} conversationsList[].chatMode - 对话模式\n     */\n    UPDATE_CONVERSATIONS_LIST(state, conversationsList) {\n        if (Array.isArray(conversationsList)) {\n            // 只保留需要的字段\n            const simplifiedList = conversationsList.map(conversation => ({\n                id: conversation.id,\n                abstract: conversation.abstract,\n                chatMode: conversation.chatMode,\n                createdAt: conversation.createdAt,\n                updatedAt: conversation.updatedAt\n            }));\n            \n            state.aiChat.conversations = simplifiedList;\n        }\n    },\n    \n    /**\n     * 设置历史会话摘要列表\n     * @param {Object} state - Vuex状态对象\n     * @param {Array<Object>} summaries - 历史会话摘要列表\n     */\n    SET_HISTORY_SUMMARIES(state, summaries) {\n        if (!state.aiChat.historySummaries) {\n            state.aiChat.historySummaries = [];\n        }\n        \n        if (Array.isArray(summaries)) {\n            state.aiChat.historySummaries = summaries;\n        }\n    },\n    \n    /**\n     * 添加一条会话记录\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} conversation - 会话对象\n     */\n    ADD_CONVERSATION(state, conversation) {\n        if (!conversation || !conversation.id) return;\n        \n        // 查找是否已存在\n        const index = state.aiChat.conversations.findIndex(c => c.id === conversation.id);\n        \n        if (index !== -1) {\n            // 更新已存在的会话\n            state.aiChat.conversations.splice(index, 1, conversation);\n        } else {\n            // 添加新会话\n            state.aiChat.conversations.push(conversation);\n        }\n    },\n    \n    /**\n     * 移除一条会话记录\n     * @param {Object} state - Vuex状态对象\n     * @param {String} conversationId - 会话ID\n     */\n    REMOVE_CONVERSATION(state, conversationId) {\n        if (!conversationId) return;\n        \n        state.aiChat.conversations = state.aiChat.conversations.filter(c => c.id !== conversationId);\n    },\n    \n    /**\n     * 添加一条历史摘要\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} summary - 历史摘要对象\n     */\n    ADD_HISTORY_SUMMARY(state, summary) {\n        if (!summary || !summary.id) return;\n        \n        if (!state.aiChat.historySummaries) {\n            state.aiChat.historySummaries = [];\n        }\n        \n        // 查找是否已存在\n        const index = state.aiChat.historySummaries.findIndex(s => s.id === summary.id);\n        \n        if (index !== -1) {\n            // 更新已存在的摘要\n            state.aiChat.historySummaries.splice(index, 1, summary);\n        } else {\n            // 添加新摘要\n            state.aiChat.historySummaries.push(summary);\n        }\n    },\n    \n    /**\n     * 移除一条历史摘要\n     * @param {Object} state - Vuex状态对象\n     * @param {String} summaryId - 摘要ID\n     */\n    REMOVE_HISTORY_SUMMARY(state, summaryId) {\n        if (!summaryId) return;\n        \n        if (state.aiChat.historySummaries) {\n            state.aiChat.historySummaries = state.aiChat.historySummaries.filter(s => s.id !== summaryId);\n        }\n    },\n    \n    /**\n     * 根据对话ID更新完整对话内容\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} conversationData - 完整的对话数据\n     * @param {string} conversationData.id - 对话ID\n     */\n    UPDATE_CONVERSATION_DETAIL(state, conversationData) {\n        if (!conversationData || !conversationData.id) return;\n        \n        // 查找是否已存在该对话\n        const index = state.aiChat.conversations.findIndex(\n            conv => conv.id === conversationData.id\n        );\n        \n        if (index !== -1) {\n            // 更新已存在的对话\n            state.aiChat.conversations[index] = conversationData;\n        } else {\n            // 添加新对话\n            state.aiChat.conversations.push(conversationData);\n        }\n        \n        // 设置当前活跃对话\n        state.aiChat.activeConversation = conversationData.id;\n    },\n    \n    /**\n     * 更新当前活跃的对话ID\n     * @param {Object} state - Vuex状态对象\n     * @param {string|null} conversationId - 对话ID\n     */\n    UPDATE_CURRENT_CONVERSATION(state, conversationId) {\n        state.aiChat.activeConversation = conversationId;\n    },\n    \n    /**\n     * 更新用户选择的聊天模式\n     * @param {Object} state - Vuex状态对象\n     * @param {string} chatMode - 聊天模式\n     */\n    UPDATE_CHAT_MODE(state, chatMode) {\n        state.aiChat.chatMode = chatMode;\n    },\n    \n    /**\n     * 更新用户信息\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} userInfo - 用户信息\n     * @param {string} userInfo.school - 用户学校\n     * @param {string} userInfo.major - 用户专业\n     */\n    UPDATE_USER_INFO(state, userInfo) {\n        state.aiChat.userInfo = {\n            ...state.aiChat.userInfo,\n            ...userInfo\n        };\n    },\n    \n    /**\n     * 更新用户学校信息\n     * @param {Object} state - Vuex状态对象\n     * @param {string} school - 用户学校\n     */\n    UPDATE_USER_SCHOOL(state, school) {\n        if (!state.aiChat.userInfo) {\n            state.aiChat.userInfo = {\n                school: '',\n                major: ''\n            };\n        }\n        state.aiChat.userInfo.school = school;\n    },\n    \n    /**\n     * 更新用户专业信息\n     * @param {Object} state - Vuex状态对象\n     * @param {string} major - 用户专业\n     */\n    UPDATE_USER_MAJOR(state, major) {\n        if (!state.aiChat.userInfo) {\n            state.aiChat.userInfo = {\n                school: '',\n                major: ''\n            };\n        }\n        state.aiChat.userInfo.major = major;\n    },\n    \n    /**\n     * 从对话列表中删除指定ID的对话\n     * @param {Object} state - Vuex状态对象\n     * @param {string} conversationId - 对话ID\n     */\n    DELETE_CONVERSATION(state, conversationId) {\n        state.aiChat.conversations = state.aiChat.conversations.filter(\n            conv => conv.id !== conversationId\n        );\n        \n        // 如果删除的是当前活跃对话，则清空当前活跃对话\n        if (state.aiChat.activeConversation === conversationId) {\n            state.aiChat.activeConversation = null;\n        }\n    }\n}; "],"names":[],"mappings":"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"}