{"version":3,"file":"index.js","sources":["components/loading/GlobalLoading.vue","components/loading/LoadingAnimation.vue","components/loading/index.js"],"sourcesContent":["<template>\n  <view class=\"global-loading-wrapper\" :style=\"wrapperStyle\" :class=\"{ 'visible': visible, 'fullscreen': fullscreen }\">\n    <LoadingAnimation \n      ref=\"loadingRef\"\n      :src=\"src\"\n      :width=\"width\"\n      :height=\"height\" \n      :showText=\"showText\"\n      :text=\"text\"\n      :autoPlay=\"autoPlay\"\n      @dataReady=\"onDataReady\"\n      @error=\"onError\"\n      @timeout=\"onTimeout\"\n      @mounted=\"onMounted\"\n    />\n  </view>\n</template>\n\n<script setup lang=\"uts\">\nimport { ref, computed, onMounted, provide, onBeforeUnmount } from 'vue'\nimport LoadingAnimation from './LoadingAnimation.vue'\nimport { useGlobalAnimationState } from './useAnimationCache.js'\n\n/**\n * @typedef {Object} GlobalLoadingProps\n * @property {String} src - 动画源文件地址\n * @property {String} width - 动画宽度\n * @property {String} height - 动画高度\n * @property {Boolean} fullscreen - 是否全屏显示\n * @property {Boolean} transparent - 背景是否透明\n * @property {String} backgroundColor - 背景颜色\n * @property {Boolean} autoPlay - 是否自动播放\n * @property {Boolean} preload - 是否预加载\n * @property {Boolean} showText - 是否显示加载文字\n * @property {String} text - 加载文字内容\n * @property {Number} zIndex - 层级\n */\n\n/**\n * 组件属性\n * @type {GlobalLoadingProps}\n */\nconst props = defineProps({\n  src: {\n    type: String,\n    default: 'https://lottie.host/1f64310d-d1a9-44c9-ac77-3c29ae849559/c3yfKGAzCm.json'\n  },\n  width: {\n    type: String,\n    default: '200rpx'\n  },\n  height: {\n    type: String,\n    default: '200rpx'\n  },\n  fullscreen: {\n    type: Boolean,\n    default: true\n  },\n  transparent: {\n    type: Boolean,\n    default: false\n  },\n  backgroundColor: {\n    type: String,\n    default: 'rgba(255, 255, 255, 0.9)'\n  },\n  autoPlay: {\n    type: Boolean,\n    default: true\n  },\n  preload: {\n    type: Boolean,\n    default: true\n  },\n  showText: {\n    type: Boolean,\n    default: true\n  },\n  text: {\n    type: String,\n    default: '加载中...'\n  },\n  zIndex: {\n    type: Number,\n    default: 9999\n  }\n})\n\n/**\n * 组件事件\n * @type {Object}\n */\nconst emit = defineEmits(['mounted', 'dataReady', 'error', 'timeout'])\n\n// 组件内部状态\nconst loadingRef = ref(null)\nconst visible = ref(false)\nconst isPreloaded = ref(false)\n\n// 获取全局动画状态\nconst { \n  globalState, \n  getGlobalStats, \n  isAllAnimationsLoaded,\n} = useGlobalAnimationState()\n\n/**\n * 计算包装器样式\n */\nconst wrapperStyle = computed(() => {\n  return {\n    backgroundColor: props.transparent ? 'transparent' : props.backgroundColor,\n    zIndex: props.zIndex\n  }\n})\n\n/**\n * 显示加载动画\n */\nconst show = () => {\n  visible.value = true\n  if (loadingRef.value) {\n    loadingRef.value.show()\n  }\n}\n\n/**\n * 隐藏加载动画\n */\nconst hide = () => {\n  visible.value = false\n  if (loadingRef.value) {\n    loadingRef.value.hide()\n  }\n}\n\n/**\n * 预加载动画资源\n * @returns {Promise<boolean>} 预加载结果\n */\nconst preload = async () => {\n  if (isPreloaded.value) {\n    return true\n  }\n  \n  try {\n    if (loadingRef.value) {\n      const result = await loadingRef.value.preload()\n      if (result) {\n        isPreloaded.value = true\n      }\n      return result\n    }\n    return false\n  } catch (error) {\n    uni.__f__('error','at components/loading/GlobalLoading.vue:157','预加载全局动画失败', error)\n    return false\n  }\n}\n\n/**\n * 获取动画组件\n * @returns {Object|null} 动画组件实例\n */\nconst getLottieRef = () => {\n  if (loadingRef.value && loadingRef.value.lottieRef) {\n    return loadingRef.value.lottieRef.value\n  }\n  return null\n}\n\n/**\n * 获取动画统计信息\n * @returns {Object} 统计信息\n */\nconst getAnimationStats = () => {\n  return getGlobalStats()\n}\n\n/**\n * 动画数据准备完成回调\n */\nconst onDataReady = () => {\n  isPreloaded.value = true\n  emit('dataReady')\n}\n\n/**\n * 处理错误\n * @param {Error} error - 错误信息\n */\nconst onError = (error) => {\n  emit('error', error)\n}\n\n/**\n * 处理超时\n * @param {String} src - 动画源\n */\nconst onTimeout = (src) => {\n  emit('timeout', src)\n}\n\n/**\n * 动画组件挂载完成\n */\nconst onMounted = () => {\n  // 如果设置了预加载，则自动预加载\n  if (props.preload) {\n    preload()\n  }\n  \n  emit('mounted')\n}\n\n/**\n * 提供给外部的组件方法\n */\ndefineExpose({\n  show,\n  hide,\n  preload,\n  isPreloaded: computed(() => isPreloaded.value),\n  getLottieRef,\n  getAnimationStats\n})\n\n// 全局状态注入\nprovide('globalLoading', {\n  show,\n  hide,\n  preload,\n  isPreloaded: computed(() => isPreloaded.value),\n  stats: getGlobalStats\n})\n\n// 组件挂载\nonMounted(() => {\n  // 注册全局实例\n  const globalApp = getApp()\n  if (globalApp) {\n    globalApp.globalData = globalApp.globalData || {}\n    \n    // 更新全局$loading对象\n    globalApp.globalData.$loading = {\n      show,\n      hide,\n      preload,\n      isPreloaded: { value: isPreloaded.value },\n      getStatus: getAnimationStats,\n      globalState,\n      isReady: true,\n      componentMounted: true\n    }\n    \n    uni.__f__('log','at components/loading/GlobalLoading.vue:257','全局$loading对象已更新')\n  }\n})\n\n// 组件卸载\nonBeforeUnmount(() => {\n  // 清理全局引用\n  const globalApp = getApp()\n  if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\n    // 保留引用但标记为未挂载\n    globalApp.globalData.$loading.componentMounted = false\n  }\n})\n</script>\n\n<style>\n.global-loading-wrapper {\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s, visibility 0.3s;\n}\n\n.global-loading-wrapper.fullscreen {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.global-loading-wrapper.visible {\n  opacity: 1;\n  visibility: visible;\n}\n</style> ","<template>\n  <view class=\"loading-animation-container\" :class=\"{ 'visible': visible }\">\n    <view class=\"animation-wrapper\">\n      <view class=\"lottie-container\">\n        <c-lottie\n          ref=\"lottieRef\"\n          :src=\"animationSrc\"\n          :width=\"width\"\n          :height=\"height\"\n          :loop=\"true\"\n          :autoPlay=\"autoPlay\"\n          @dataReady=\"onDataReady\"\n        ></c-lottie>\n      </view>\n      <text v-if=\"showText\" class=\"loading-text\">{{ text }}</text>\n    </view>\n  </view>\n</template>\n\n<script setup lang=\"uts\">\nimport { ref, onMounted, computed, watch, onBeforeUnmount } from 'vue';\nimport { useAnimationCache } from './useAnimationCache.js';\n\n/**\n * @typedef {Object} LoadingAnimationProps\n * @property {String} src - 动画源文件地址\n * @property {String} width - 动画宽度\n * @property {String} height - 动画高度\n * @property {Boolean} autoPlay - 是否自动播放\n * @property {Boolean} showText - 是否显示加载文字\n * @property {String} text - 加载文字内容\n */\n\n/**\n * 组件属性\n * @type {LoadingAnimationProps}\n */\nconst props = defineProps({\n  src: {\n    type: String,\n    default: 'https://lottie.host/1f64310d-d1a9-44c9-ac77-3c29ae849559/c3yfKGAzCm.json'\n  },\n  width: {\n    type: String,\n    default: '200rpx'\n  },\n  height: {\n    type: String,\n    default: '200rpx'\n  },\n  autoPlay: {\n    type: Boolean,\n    default: true\n  },\n  showText: {\n    type: Boolean,\n    default: true\n  },\n  text: {\n    type: String,\n    default: '加载中...'\n  }\n})\n\n/**\n * 组件事件\n * @type {Object}\n */\nconst emit = defineEmits(['mounted', 'dataReady', 'error', 'timeout'])\n\n// 组件内部状态\nconst lottieRef = ref(null)\nconst visible = ref(false)\nconst animationSrc = ref(props.src)\nconst isLoaded = ref(false)\nconst isPlaying = ref(false)\nconst loadingTimeout = ref(null)\n\n// 使用动画缓存功能\nconst { \n  isAnimationCached, \n  loadAnimationData, \n  getAnimationFromCache,\n  getAnimationStats\n} = useAnimationCache()\n\n/**\n * 显示加载动画\n */\nconst show = () => {\n  if (!isLoaded.value) {\n    preload()\n  }\n  visible.value = true\n  if (lottieRef.value && isLoaded.value) {\n    lottieRef.value.call('play')\n    isPlaying.value = true\n  }\n}\n\n/**\n * 隐藏加载动画\n */\nconst hide = () => {\n  visible.value = false\n  if (lottieRef.value && isPlaying.value) {\n    lottieRef.value.call('stop')\n    isPlaying.value = false\n  }\n}\n\n/**\n * 预加载动画资源\n * @returns {Promise<boolean>} 预加载结果\n */\nconst preload = async () => {\n  if (isLoaded.value) {\n    return true\n  }\n  \n  try {\n    // 设置加载超时处理\n    if (loadingTimeout.value) {\n      clearTimeout(loadingTimeout.value)\n    }\n    \n    loadingTimeout.value = setTimeout(() => {\n      uni.__f__('warn','at components/loading/LoadingAnimation.vue:128','动画加载超时', animationSrc.value)\n      emit('timeout', animationSrc.value)\n    }, 5000)\n    \n    // 预加载动画数据\n    const animationData = await loadAnimationData(animationSrc.value)\n    \n    if (animationData) {\n      if (loadingTimeout.value) {\n        clearTimeout(loadingTimeout.value)\n        loadingTimeout.value = null\n      }\n      \n      isLoaded.value = true\n      return true\n    }\n    \n    return false\n  } catch (error) {\n    uni.__f__('error','at components/loading/LoadingAnimation.vue:147','预加载动画失败', error)\n    emit('error', error)\n    \n    if (loadingTimeout.value) {\n      clearTimeout(loadingTimeout.value)\n      loadingTimeout.value = null\n    }\n    \n    return false\n  }\n}\n\n/**\n * 动画数据准备完成回调\n */\nconst onDataReady = () => {\n  uni.__f__('log','at components/loading/LoadingAnimation.vue:163','动画数据准备完成')\n  isLoaded.value = true\n  \n  if (loadingTimeout.value) {\n    clearTimeout(loadingTimeout.value)\n    loadingTimeout.value = null\n  }\n  \n  emit('dataReady')\n  \n  // 如果当前应该显示动画，则播放\n  if (visible.value && !isPlaying.value) {\n    lottieRef.value.call('play')\n    isPlaying.value = true\n  }\n}\n\n/**\n * 监听src属性变化\n */\nwatch(() => props.src, (newSrc) => {\n  if (newSrc !== animationSrc.value) {\n    animationSrc.value = newSrc\n    isLoaded.value = false\n    \n    // 如果当前正在显示，需要重新加载\n    if (visible.value) {\n      preload()\n    }\n  }\n})\n\n/**\n * 提供给外部的组件方法\n */\ndefineExpose({\n  show,\n  hide,\n  preload,\n  isLoaded: computed(() => isLoaded.value),\n  isPlaying: computed(() => isPlaying.value),\n  lottieRef,\n  getAnimationStats\n})\n\n// 组件挂载时预加载\nonMounted(() => {\n  uni.__f__('log','at components/loading/LoadingAnimation.vue:210','加载动画组件已挂载')\n  \n  // 检查是否已缓存\n  if (isAnimationCached(animationSrc.value)) {\n    uni.__f__('log','at components/loading/LoadingAnimation.vue:214','动画已缓存，直接标记为已加载')\n    isLoaded.value = true\n  } else {\n    // 自动预加载但不显示\n    preload().then(() => {\n      uni.__f__('log','at components/loading/LoadingAnimation.vue:219','动画预加载完成', isLoaded.value)\n    })\n  }\n  \n  emit('mounted')\n})\n\n// 组件卸载前清理\nonBeforeUnmount(() => {\n  if (loadingTimeout.value) {\n    clearTimeout(loadingTimeout.value)\n    loadingTimeout.value = null\n  }\n  \n  // 停止播放\n  if (lottieRef.value && isPlaying.value) {\n    lottieRef.value.call('stop')\n    isPlaying.value = false\n  }\n})\n</script>\n\n<style>\n.loading-animation-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.9);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 9999;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s, visibility 0.3s;\n}\n\n.loading-animation-container.visible {\n  opacity: 1;\n  visibility: visible;\n}\n\n.animation-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.lottie-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.loading-text {\n  margin-top: 20rpx;\n  font-size: 28rpx;\n  color: #666;\n}\n</style> ","import GlobalLoading from './GlobalLoading.vue'\nimport LoadingAnimation from './LoadingAnimation.vue'\nimport { useAnimationCache, useGlobalAnimationState, preloadAnimations } from './useAnimationCache.js'\n\n/**\n * 安装全局加载插件\n * @param {Object} app - Vue应用实例\n * @param {Object} options - 插件选项\n */\nexport function install(app, options = {}) {\n  // 注册组件\n  app.component('GlobalLoading', GlobalLoading)\n  app.component('LottieLoading', LoadingAnimation)\n  \n  // 注册全局属性\n  app.config.globalProperties.$loading = {\n    show: () => {\n      // 访问全局App对象获取loading控制\n      const globalApp = getApp()\n      if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\n        return globalApp.globalData.$loading.show()\n      }\n      return false\n    },\n    hide: () => {\n      const globalApp = getApp()\n      if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\n        return globalApp.globalData.$loading.hide()\n      }\n      return false\n    },\n    preload: async () => {\n      const globalApp = getApp()\n      if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\n        return await globalApp.globalData.$loading.preload()\n      }\n      return false\n    }\n  }\n  \n  // 注入全局动画状态对象\n  const { \n    globalState, \n    getGlobalStats, \n    isAllAnimationsLoaded,\n    preloadAnimation\n  } = useGlobalAnimationState()\n  \n  app.provide('animationState', {\n    globalState,\n    getStats: getGlobalStats,\n    isAllLoaded: isAllAnimationsLoaded,\n    preload: preloadAnimation\n  })\n  \n  // 注册mixin\n  app.mixin({\n    beforeCreate() {\n      this.$animationState = {\n        globalState,\n        getStats: getGlobalStats,\n        isAllLoaded: isAllAnimationsLoaded,\n        preload: preloadAnimation\n      }\n    }\n  })\n  \n  // 如果有预加载选项，执行\n  if (options.preload) {\n    const { animations } = options.preload\n    if (animations && Array.isArray(animations) && animations.length > 0) {\n      // 延迟执行，以确保应用已完全初始化\n      setTimeout(() => {\n        preloadAnimations(animations, (progress) => {\n          console.log(`预加载进度: ${progress.progress.toFixed(2)}%`)\n        })\n        .then(result => {\n          console.log(`预加载完成: 成功${result.totalSuccess}个, 失败${result.totalFailed}个`)\n        })\n      }, 100)\n    }\n  }\n}\n\n/**\n * 创建加载组件插件\n * @param {Object} options - 插件选项\n * @returns {Object} 插件对象\n */\nexport function createLoadingPlugin(options = {}) {\n  return {\n    install: (app) => install(app, options)\n  }\n}\n\n// 直接导出组件和钩子\nexport {\n  GlobalLoading,\n  LoadingAnimation,\n  useAnimationCache,\n  useGlobalAnimationState,\n  preloadAnimations\n}\n\n// 导出默认插件\nexport default {\n  install\n} "],"names":["ref","useGlobalAnimationState","computed","__awaiter","uni","provide","onBeforeUnmount","useAnimationCache","watch","onMounted","GlobalLoading","LoadingAnimation","preloadAnimations"],"mappings":"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"}