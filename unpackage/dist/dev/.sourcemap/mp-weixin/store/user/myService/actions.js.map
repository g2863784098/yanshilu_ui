{"version":3,"file":"actions.js","sources":["store/user/myService/actions.js"],"sourcesContent":["/**\n * myService模块的actions\n * @module store/user/myService/actions\n */\n\nimport { apiRequest } from '../JWT';\n\nexport default {\n    /**\n     * 获取用户所有服务信息\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {Object} [options={}] - 请求选项\n     * @returns {Promise<Object>} 包含服务数据的Promise\n     */\n    async fetchUserServices({ commit }, options = {}) {\n        try {\n            const response = await apiRequest('/api/user/services', 'GET', options);\n            \n            // 提交mutation更新状态\n            commit('SET_USER_SERVICES', response.data);\n            \n            return response.data;\n        } catch (error) {\n            console.error('获取用户服务失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 获取服务详情\n     * @param {Object} context - Vuex上下文对象 \n     * @param {String} serviceId - 服务ID\n     * @returns {Promise<Object>} 包含服务详情的Promise\n     */\n    async getServiceDetail(_, serviceId) {\n        try {\n            const response = await apiRequest(`/api/user/services/${serviceId}`, 'GET');\n            return response.data;\n        } catch (error) {\n            console.error('获取服务详情失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 更新服务信息\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {Object} serviceData - 服务数据\n     * @param {String} serviceData.id - 服务ID\n     * @param {Object} serviceData.updatedInfo - 更新的信息\n     * @returns {Promise<Object>} 更新结果Promise\n     */\n    async updateService({ commit }, { id, updatedInfo }) {\n        try {\n            const response = await apiRequest(`/api/user/services/${id}`, 'PUT', updatedInfo);\n            \n            if (response.success) {\n                // 提交mutation更新状态\n                commit('UPDATE_SERVICE_BY_USER', { id, updatedInfo });\n            }\n            \n            return response.data;\n        } catch (error) {\n            console.error('更新服务信息失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 添加新服务\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {Object} serviceData - 服务数据\n     * @returns {Promise<Object>} 添加结果Promise\n     */\n    async addService({ commit }, serviceData) {\n        try {\n            const response = await apiRequest('/api/user/services', 'POST', serviceData);\n            \n            if (response.success) {\n                // 提交mutation更新状态\n                commit('ADD_SERVICE', response.data);\n            }\n            \n            return response.data;\n        } catch (error) {\n            console.error('添加服务失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 删除服务\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {String} serviceId - 服务ID\n     * @returns {Promise<Object>} 删除结果Promise\n     */\n    async deleteService({ commit }, serviceId) {\n        try {\n            const response = await apiRequest(`/api/user/services/${serviceId}`, 'DELETE');\n            \n            if (response.success) {\n                // 提交mutation更新状态\n                commit('DELETE_SERVICE', serviceId);\n            }\n            \n            return response.data;\n        } catch (error) {\n            console.error('删除服务失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 设置当前正在编辑的服务\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {Object|null} service - 服务对象或null\n     */\n    setCurrentEditingService({ commit }, service) {\n        commit('SET_CURRENT_EDITING_SERVICE', service);\n    },\n    \n    /**\n     * 上传服务封面图片\n     * @param {Object} context - Vuex上下文对象\n     * @param {Object} fileData - 文件数据\n     * @param {String} fileData.serviceId - 服务ID\n     * @param {File} fileData.file - 要上传的文件\n     * @returns {Promise<Object>} 上传结果Promise\n     */\n    async uploadServiceCover(_, fileData) {\n        try {\n            const formData = new FormData();\n            formData.append('file', fileData.file);\n            \n            const response = await apiRequest(`/api/user/services/${fileData.serviceId}/cover`, 'POST', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            \n            return response.data;\n        } catch (error) {\n            console.error('上传服务封面失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 上传服务附件\n     * @param {Object} context - Vuex上下文对象\n     * @param {Object} fileData - 文件数据\n     * @param {String} fileData.serviceId - 服务ID\n     * @param {File} fileData.file - 要上传的文件\n     * @returns {Promise<Object>} 上传结果Promise\n     */\n    async uploadServiceAttachment(_, fileData) {\n        try {\n            const formData = new FormData();\n            formData.append('file', fileData.file);\n            \n            const response = await apiRequest(`/api/user/services/${fileData.serviceId}/attachment`, 'POST', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            \n            return response.data;\n        } catch (error) {\n            console.error('上传服务附件失败:', error);\n            throw error;\n        }\n    },\n    \n    /**\n     * 设置服务过滤条件\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {Object} filter - 过滤条件\n     */\n    setServiceFilter({ commit }, filter) {\n        commit('SET_SERVICE_FILTER', filter);\n    },\n    \n    /**\n     * 根据服务类型筛选服务\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {String} type - 服务类型\n     */\n    filterServicesByType({ commit }, type) {\n        commit('SET_SERVICE_FILTER', { type });\n    },\n    \n    /**\n     * 根据关键词搜索服务\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     * @param {String} keyword - 搜索关键词\n     */\n    searchServicesByKeyword({ commit }, keyword) {\n        commit('SET_SERVICE_FILTER', { keyword });\n    },\n    \n    /**\n     * 模拟加载本地服务数据\n     * @param {Object} context - Vuex上下文对象\n     * @param {Function} context.commit - 提交mutation的函数\n     */\n    loadLocalServices({ commit }) {\n        try {\n            // 在真实环境中，这里应该从本地存储加载数据\n            const servicesStr = uni.getStorageSync('services');\n            if (servicesStr) {\n                const services = JSON.parse(servicesStr);\n                commit('SET_USER_SERVICES', services);\n            }\n            return { success: true };\n        } catch (error) {\n            console.error('加载本地服务数据失败:', error);\n            return { success: false, error };\n        }\n    },\n    \n    /**\n     * 保存服务到本地存储\n     * @param {Object} context - Vuex上下文对象\n     * @param {Object} state - Vuex状态对象\n     */\n    saveServicesToLocal({ state }) {\n        try {\n            // 在真实环境中，这里应该保存到本地存储\n            uni.setStorageSync('services', JSON.stringify(state.service));\n            return { success: true };\n        } catch (error) {\n            console.error('保存服务到本地存储失败:', error);\n            return { success: false, error };\n        }\n    }\n}; "],"names":["apiRequest","uni"],"mappings":"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"}