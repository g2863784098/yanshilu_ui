{"version":3,"file":"getters.js","sources":["store/user/myService/getters.js"],"sourcesContent":["/**\n * myService模块的getters\n * @module store/user/myService/getters\n */\n\nexport default {\n    /**\n     * 获取所有服务\n     * @param {Object} state - 当前模块的状态\n     * @returns {Array} 服务数组\n     */\n    getAllServices: state => state.service,\n    \n    /**\n     * 按ID获取服务\n     * @param {Object} state - 当前模块的状态\n     * @returns {Function} 返回一个函数，该函数接受服务ID并返回对应的服务对象\n     */\n    getServiceById: state => id => state.service.find(service => service.id === id),\n    \n    /**\n     * 按类型获取服务\n     * @param {Object} state - 当前模块的状态\n     * @returns {Function} 返回一个函数，该函数接受服务类型名称并返回该类型的所有服务\n     */\n    getServicesByType: state => typeName => state.service.filter(service => service.type.typename === typeName),\n    \n    /**\n     * 获取服务总数\n     * @param {Object} state - 当前模块的状态\n     * @returns {Number} 服务总数\n     */\n    getServiceCount: state => state.service.length,\n    \n    /**\n     * 获取服务价格区间\n     * @param {Object} state - 当前模块的状态\n     * @returns {Object} 包含最低价和最高价的对象\n     */\n    getPriceRange: state => {\n        const prices = state.service.map(service => {\n            // 提取价格中的数字部分\n            const priceNum = parseInt(service.price.replace(/[^0-9]/g, ''));\n            return isNaN(priceNum) ? 0 : priceNum;\n        });\n        \n        return {\n            min: Math.min(...prices),\n            max: Math.max(...prices)\n        };\n    },\n    \n    /**\n     * 获取当前正在编辑的服务\n     * @param {Object} state - 当前模块的状态\n     * @returns {Object|null} 当前正在编辑的服务或null\n     */\n    getCurrentEditingService: state => state.currentEditingService,\n    \n    /**\n     * 获取可用的服务类型列表\n     * @param {Object} state - 当前模块的状态\n     * @returns {Array} 服务类型列表\n     */\n    getServiceTypes: state => state.serviceTypes,\n    \n    /**\n     * 获取按创建时间排序的服务列表\n     * @param {Object} state - 当前模块的状态\n     * @returns {Array} 按创建时间排序的服务数组\n     */\n    getServicesSortedByCreateTime: state => {\n        return [...state.service].sort((a, b) => {\n            return new Date(b.createTime) - new Date(a.createTime);\n        });\n    },\n    \n    /**\n     * 获取按更新时间排序的服务列表\n     * @param {Object} state - 当前模块的状态\n     * @returns {Array} 按更新时间排序的服务数组\n     */\n    getServicesSortedByUpdateTime: state => {\n        return [...state.service].sort((a, b) => {\n            return new Date(b.updateTime) - new Date(a.updateTime);\n        });\n    },\n    \n    /**\n     * 获取按价格排序的服务列表\n     * @param {Object} state - 当前模块的状态\n     * @param {Boolean} ascending - 是否升序排列\n     * @returns {Array} 按价格排序的服务数组\n     */\n    getServicesSortedByPrice: state => ascending => {\n        return [...state.service].sort((a, b) => {\n            const priceA = parseInt(a.price.replace(/[^0-9]/g, ''));\n            const priceB = parseInt(b.price.replace(/[^0-9]/g, ''));\n            return ascending ? priceA - priceB : priceB - priceA;\n        });\n    },\n    \n    /**\n     * 获取按当前过滤条件筛选的服务列表\n     * @param {Object} state - 当前模块的状态\n     * @returns {Array} 筛选后的服务数组\n     */\n    getFilteredServices: state => {\n        return state.service.filter(service => {\n            // 类型筛选\n            if (state.filter.type && service.type.typename !== state.filter.type) {\n                return false;\n            }\n            \n            // 价格范围筛选\n            const priceNum = parseInt(service.price.replace(/[^0-9]/g, ''));\n            if (priceNum < state.filter.priceRange.min || priceNum > state.filter.priceRange.max) {\n                return false;\n            }\n            \n            // 关键词搜索\n            if (state.filter.keyword) {\n                const keyword = state.filter.keyword.toLowerCase();\n                const name = (service.name || '').toLowerCase();\n                const description = (service.description || '').toLowerCase();\n                \n                if (!name.includes(keyword) && !description.includes(keyword)) {\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n    },\n    \n    /**\n     * 获取按状态分组的服务统计\n     * @param {Object} state - 当前模块的状态\n     * @returns {Object} 包含各状态服务数量的对象\n     */\n    getServiceStatusStats: state => {\n        const stats = {\n            active: 0,\n            inactive: 0,\n            draft: 0\n        };\n        \n        state.service.forEach(service => {\n            const status = service.status || 'active';\n            if (stats[status] !== undefined) {\n                stats[status]++;\n            }\n        });\n        \n        return stats;\n    },\n    \n    /**\n     * 获取按类型分组的服务列表\n     * @param {Object} state - 当前模块的状态\n     * @returns {Object} 按类型分组的服务对象\n     */\n    getServicesGroupedByType: state => {\n        const result = {};\n        \n        state.service.forEach(service => {\n            const typename = service.type.typename;\n            if (!result[typename]) {\n                result[typename] = [];\n            }\n            result[typename].push(service);\n        });\n        \n        return result;\n    }\n}; "],"names":[],"mappings":"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"}